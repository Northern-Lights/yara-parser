//line /grammar/lexer.go:2
//line /grammar/lexer.l:33
package grammar

import (
    "fmt"
    "io"
    "log"
    "os"
    "math"
    "strconv"
    "strings"

    "github.com/Northern-Lights/yara-parser/data"
)

// Necessary types for flexgo
type YYtype interface{}
type YYcontext interface{}

// Global YYtext - each action sets this to the current yytext
var YYtext string

// Accumulators for gathering groups of tokens as text because text collection
// is like an "inclusive" start condition while the lexer requires "exclusive"
var (
    collect           bool  // condition text
    conditionBuilder  strings.Builder
    collectText       bool  // string/regex/etc text
    textBuilder       strings.Builder
)

  // This comment applies to the YY_USER_ACTION macro, which is having
  // a problem with comments...
  // For condition, the colons and whitespace will be collected in the
  // prefix and the right brace for the suffix. Use strings.TrimLeft/Right





//line /grammar/lexer.go:43

// START OF SKELL ------------------------------------------------------
// A lexical scanner generated by flexgo

type Scanner struct {
	In   io.Reader
	Out  io.Writer
	Lineno int

	Filename      string
	Wrap          func(*Scanner) bool
	IsInteractive func(io.Reader) bool
	Context       YYcontext

	lastAcceptingState   int
	lastAcceptingCpos    int
	debug                bool
	start                int
	stateBuf             []int
	statePtr             int
	fullState            int
	fullMatch            int
	fullLp               int
	lp                   int
	lookingForTrailBegin int
	holdChar             byte
	cBufP                int
	didBufferSwitchOnEof bool
	textPtr              int
	nChars               int
	init                 bool
	moreFlag             bool
    moreLen              int

	// buffer
	inputFile    io.Reader
	chBuf        []byte // input buffer
	bufPos       int    // current position in input buffer
	bufSize      int
	bufNChars    int
	Interactive  bool
	atBol        int // 0 (false) or 1 (true)
	fillBuffer   bool
	bufferStatus int
}

func NewScanner() *Scanner {
	yy := Scanner{
		Lineno: 1,
		In:            os.Stdin,
		Out:           os.Stdout,
		Wrap:          func(yyy *Scanner) bool { return true },
		IsInteractive: func(file io.Reader) bool { return yyInteractiveDefault },
		bufSize:       yyBufSize,
		chBuf:         make([]byte, yyBufSize+2),
		start:         1,
		stateBuf:      make([]int, yyBufSize+2),
		atBol:         1,
		debug:         yyFlexDebug,
		fillBuffer:    true,
	}
	return &yy
}

func (yy *Scanner) NewFile() {
	yy.Restart(yy.In)
}

const yyEndOfBufferChar = 0

const yyBufSize = 32768

const (
	eobActEndOfFile    = 0
	eobActContinueScan = 1
	eobActLastMatch    = 2
)

const (
	yyBufferNew        = 0
	yyBufferNormal     = 1
	yyBufferEofPending = 2
)

// [1.0] the user's section 1 definitions and yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here
/* Begin user sect3 */
const yyFlexDebug = false

const yyInteractiveDefault = false
// SKEL ----------------------------------------------------------------

// [1.5] DFA------------------------------------------------------------
// SKEL ----------------------------------------------------------------

// [4.0] data tables for the DFA go here -------------------------------
const yyNumRules = 85
const yyEndOfBuffer = 86
var yyAccept = [347]int16{   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       86,   84,   83,   83,   59,   80,   57,   56,   84,   81,
       62,   62,    3,   84,    4,   58,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   48,   49,   72,   73,   66,
       85,   78,   79,   75,   85,   85,   53,   53,   59,    8,
       57,   55,   56,    2,   51,   54,    0,   62,    0,    0,
        0,    0,    9,    5,    7,    6,   10,   58,   61,   61,
       61,   61,   28,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   29,   61,   61,   61,   61,

       30,   27,   61,   61,   61,   61,   61,   61,   61,   61,
        0,    0,   72,   74,   69,   70,   68,   67,   74,   78,
       75,   75,   77,   76,   52,   54,   63,   62,   65,   64,
       33,   26,   34,   61,   61,   61,   61,   61,   61,   61,
       61,   32,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   25,   61,   61,   61,   61,
       61,   61,   61,   61,   18,   82,    0,    0,    0,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   60,   61,   61,
       14,   61,   35,   61,   13,   61,   61,   31,   23,   17,

        0,    0,    0,    0,    0,   82,   71,   16,   61,   61,
       61,   61,   61,   61,   24,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
        0,    0,    0,   19,   61,   61,   61,   61,   61,   61,
       61,   12,   61,   61,   61,   46,   61,   60,   61,   61,
       22,   61,   61,   61,    0,    0,    0,    0,    0,    0,
        0,   82,   61,   61,   61,   47,   61,   61,   61,   61,
       61,   61,   45,   50,   61,   38,   11,   61,   15,    0,
       82,    0,    0,    0,    0,   82,    0,    0,   61,   61,
       39,   41,   61,   37,   21,   61,   61,   61,   61,    0,

        0,    0,    0,    0,    0,    0,   82,    0,   82,    0,
        0,    0,    0,   82,   61,    1,   61,   42,   44,   61,
       61,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   82,    0,    0,    0,   82,   20,   36,   61,   40,
        0,    0,    0,    0,   43,    0,
    }

var yyEc = [256]byte{    0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    1,    1,    1,    8,
        8,    9,    1,    1,    8,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   17,   19,   20,    1,    1,   21,
       22,   23,    8,   24,   25,   26,   25,   25,   25,   25,
       27,   27,   27,   27,   28,   27,   29,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
        8,   30,    8,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   27,   27,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,    8,   57,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,
    }

var yyMeta = [58]byte{    0,
        1,    2,    3,    1,    4,    1,    1,    2,    5,    6,
        7,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    9,    1,    1,   10,   10,   11,   12,   12,   13,
       11,   10,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   11,   11,    1,    1,
    }

var yyBase = [372]uint16{   0,
        0,    0,   55,   56,   59,   60,    0,    0, 1013, 1012,
     1020, 1023, 1023, 1023,  997, 1023,    0, 1009, 1007,   55,
       55,   59,   46,  994,   50,    0,    0,   33,  983,  970,
      977,  969,   60,  970,   59,   43,  966,   59,  962,  958,
      958,   58,  926,  897,  890,  911, 1023,    0, 1023, 1023,
       86,    0, 1023,   69,  898, 1023, 1023,  890,  875, 1023,
        0, 1023,  864, 1023, 1023,    0,    0,    0,  846,  842,
      106,    0, 1023, 1023, 1023, 1023, 1023,    0,    0,  824,
       59,  830,    0,  815,  814,  815,   76,  808,  807,  800,
      804,  796,  794,   34,  792,   81,  783,  723,  722,   93,

        0,    0,  730,  728,   94,  732,  717,  723,  730,  717,
       87,  122,    0, 1023, 1023, 1023, 1023, 1023,    0,    0,
      715, 1023, 1023, 1023, 1023,    0,    0, 1023,  133,    0,
        0,    0,    0,  722,  725,   79,  720,  711,  711,  709,
      720,    0,  714,  721,  704,  711,  695,  700,  702,  119,
      708,  705,  706,  705,  690,    0,  674,  687,  675,  681,
      678,  509,  495,  507,    0, 1023,  533,  150,    0,  501,
      522,  499,  506,  494,  484,  481,  498,  485,  480,  499,
      481,  481,  496,  480,  470,  501,  504,  484,  469,  474,
        0,  464,    0,  479,    0,  461,  456,    0,    0,    0,

      487,  145,  206,    0,  146,    0, 1023,    0,  479,  445,
      453,  339,  334,  328,    0,  332,  327,  329,  337,  316,
      326,  317,  330,  328,  314,  326,  325,  311,  311,  320,
      348,  263,  162,  298,  309,  305,  312,  297,  299,  287,
      294,    0,  300,  289,  278,    0,  289,    0,  276,  275,
        0,  226,  209,  212,  250,  163,    0,    0,  319,  376,
      168,    0,  218,  213,  208,    0,  216,  214,  217,  217,
      208,  201,    0,    0,  197,    0,    0,  208,    0,  169,
      238,  433,    0,  489,  179,    0,  546,  180,  211,  202,
        0,    0,  201,    0,    0,  189,  197,  195,  185,  183,

        0,    0,    0,    0,  224,  184,    0,  187,  207,  603,
        0,  660,  188,    0,  179,    0,  156,    0,    0,  132,
      121,  716,  150,  191,  192,    0,    0,    0,    0,  134,
      195,    0,    0,  201,  202,    0,    0,    0,  101,    0,
      128,  218,  219,    0,    0, 1023,  773,  786,  799,  812,
      818,  823,  831,  838,  843,  848,  859,  869,  881,  894,
      906,  919,   70,  925,  928,  938,  951,  957,  967,  980,
      993,
    }

var yyDef = [372]int16{   0,
      346,    1,  347,  347,  348,  348,  349,  349,  350,  350,
      346,  346,  346,  346,  351,  346,  352,  353,  346,  346,
      354,  354,  346,  346,  346,  355,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  357,  346,  358,  346,  346,
      359,  360,  346,  346,  361,  346,  346,  346,  351,  346,
      352,  346,  353,  346,  346,  362,  363,   22,  346,  346,
      346,  364,  346,  346,  346,  346,  346,  355,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      357,  346,  358,  346,  346,  346,  346,  346,  365,  360,
      346,  346,  346,  346,  346,  362,  363,  346,  346,  364,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  346,  366,  367,  368,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      366,  369,  367,  203,  203,  203,  346,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      370,  346,  203,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  370,  369,  232,  232,  366,  346,
      232,  232,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  366,
      366,  346,  282,  370,  203,  282,  346,  232,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  371,

      232,  282,  282,  284,  260,  282,  282,  370,  370,  346,
      310,  346,  232,  310,  356,  356,  356,  356,  356,  356,
      356,  312,  287,  282,  371,  282,  310,  310,  312,  260,
      310,  310,  322,  369,  322,  322,  356,  356,  356,  356,
      287,  310,  371,  310,  356,    0,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,
    }

var yyNxt = [1081]uint16{   0,
       12,   13,   14,   15,   16,   17,   18,   12,   12,   19,
       20,   21,   22,   22,   22,   22,   22,   22,   22,   22,
       23,   24,   25,   26,   27,   27,   27,   27,   27,   12,
       27,   28,   29,   30,   31,   32,   33,   34,   27,   35,
       27,   36,   37,   38,   39,   27,   40,   41,   42,   43,
       27,   44,   45,   27,   27,   46,   47,   49,   49,   50,
       50,   53,   53,   65,   67,   66,   73,   74,   67,   54,
       54,   76,   77,   80,   98,   81,  146,  127,   99,  147,
       82,   83,   69,   70,   51,   51,   69,   70,   55,   55,
      115,   88,   93,  132,   94,  101,  106,  112,   71,   89,

       95,   96,  346,   90,  107,  102,   97,   72,  121,   91,
      138,  346,  133,  172,  149,  116,  122,  129,  129,  129,
      129,  129,  129,  129,  139,  159,  154,  173,  117,  150,
      167,  186,  168,  187,  118,  155,  330,  188,  119,  345,
      160,  156,  330,  166,  129,  129,  129,  129,  129,  129,
      129,  204,  111,  202,  232,  111,  233,  204,  330,  340,
      205,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      232,  256,  233,  111,  204,  204,  287,  300,  288,  301,
      339,  204,  204,  204,  204,  204,  204,  232,  287,  233,
      288,  202,  323,  259,  324,  325,  287,  326,  288,  323,

      334,  324,  259,  341,  338,  342,  206,  204,  111,  334,
      343,  111,  344,  204,  337,  256,  205,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  341,  334,  342,  259,
      204,  204,  305,  321,  320,  319,  318,  204,  204,  204,
      204,  204,  204,  317,  316,  315,  202,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  256,  279,
      278,  277,  206,  257,  258,  259,  257,  257,  257,  257,
      258,  260,  257,  261,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  257,  257,  257,  257,  258,  258,  257,
      257,  257,  257,  257,  258,  258,  258,  258,  258,  258,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  262,
      259,  259,  276,  275,  274,  273,  259,  202,  272,  280,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  271,
      270,  269,  268,  259,  259,  267,  266,  265,  264,  263,
      259,  259,  259,  259,  259,  259,  256,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  281,  282,  283,  284,  282,
      282,  282,  282,  283,  260,  282,  285,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  282,  282,  282,  282,

      283,  283,  282,  282,  282,  282,  282,  283,  283,  283,
      283,  283,  283,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  286,  302,  303,  304,  302,  302,  302,  302,
      303,  305,  302,  306,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  302,  302,  302,  302,  303,  303,  302,
      302,  302,  302,  302,  303,  303,  303,  303,  303,  303,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  307,
      304,  304,  236,  235,  234,  202,  304,  256,  230,  308,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  229,
      228,  227,  226,  304,  304,  225,  224,  188,  188,  223,
      304,  304,  304,  304,  304,  304,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  202,  200,  150,  199,  309,  310,  311,  312,  310,
      310,  310,  310,  311,  260,  310,  313,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  310,  310,  310,  310,
      311,  311,  310,  310,  310,  310,  310,  311,  311,  311,
      311,  311,  311,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  314,  327,  328,  329,  327,  327,  327,  327,
      328,  330,  327,  331,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  327,  327,  327,  327,  328,  328,  327,
      327,  327,  327,  327,  328,  328,  328,  328,  328,  328,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  332,
      333,  329,  329,  333,  333,  333,  333,  329,  334,  333,
      335,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      333,  333,  333,  333,  329,  329,  333,  333,  333,  333,
      333,  329,  329,  329,  329,  329,  329,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  336,  333,  333,  198,
      197,  196,  195,  333,  194,  193,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  192,  191,  190,  189,
      333,  333,  185,  184,  183,  182,  181,  333,  333,  333,
      333,  333,  333,  180,  179,  178,  177,  176,  175,  174,
      171,  170,  122,  165,  164,  163,  162,  161,  158,  157,
      153,  152,  333,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   59,   59,   59,   59,   59,
       61,  151,   61,   61,   61,   63,  148,  145,   63,  144,
       63,   63,   63,   68,  143,   68,  142,  141,  140,   68,
       78,  137,   78,   78,   78,   79,  136,   79,   79,   79,
      111,  111,  135,  134,  131,  111,  111,  128,  111,  113,
      113,  128,   62,  113,  113,  113,  113,  113,  113,  113,
      113,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  120,  120,  346,  120,  120,  120,

      125,  120,  120,  120,  120,  120,  123,  123,  124,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  126,
      126,  112,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  130,  110,  130,  169,  109,  169,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  207,  108,  207,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  105,  104,  103,  100,
       92,   87,   86,   85,   84,   75,   64,   62,   60,  346,
       58,   58,   11,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
    }

var yyChk = [1081]int16{   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    3,
        4,    5,    6,   20,   21,   20,   23,   23,   22,    5,
        6,   25,   25,   28,   36,   28,   94,  363,   36,   94,
       28,   28,   21,   21,    3,    4,   22,   22,    5,    6,
       51,   33,   35,   81,   35,   38,   42,  111,   21,   33,

       35,   35,   22,   33,   42,   38,   35,   21,   54,   33,
       87,   22,   81,  136,   96,   51,   54,   71,   71,   71,
       71,   71,   71,   71,   87,  105,  100,  136,   51,   96,
      112,  150,  112,  150,   51,  100,  341,  150,   51,  339,
      105,  100,  330,  111,  129,  129,  129,  129,  129,  129,
      129,  168,  168,  202,  205,  202,  205,  168,  323,  321,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      233,  256,  233,  256,  168,  168,  261,  280,  261,  280,
      320,  168,  168,  168,  168,  168,  168,  285,  288,  285,
      288,  300,  306,  300,  306,  308,  313,  308,  313,  324,

      325,  324,  325,  331,  317,  331,  168,  203,  203,  334,
      335,  334,  335,  203,  315,  309,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  342,  343,  342,  343,
      203,  203,  305,  299,  298,  297,  296,  203,  203,  203,
      203,  203,  203,  293,  290,  289,  281,  278,  275,  272,
      271,  270,  269,  268,  267,  265,  264,  263,  255,  254,
      253,  252,  203,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      259,  259,  250,  249,  247,  245,  259,  259,  244,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  243,
      241,  240,  239,  259,  259,  238,  237,  236,  235,  234,
      259,  259,  259,  259,  259,  259,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  214,  213,  212,  259,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      284,  284,  211,  210,  209,  201,  284,  284,  197,  284,

      284,  284,  284,  284,  284,  284,  284,  284,  284,  196,
      194,  192,  190,  284,  284,  189,  188,  187,  186,  185,
      284,  284,  284,  284,  284,  284,  184,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  173,  172,  171,
      170,  167,  164,  163,  162,  284,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  322,  322,  161,
      160,  159,  158,  322,  157,  155,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  154,  153,  152,  151,
      322,  322,  149,  148,  147,  146,  145,  322,  322,  322,
      322,  322,  322,  144,  143,  141,  140,  139,  138,  137,
      135,  134,  121,  110,  109,  108,  107,  106,  104,  103,
       99,   98,  322,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  351,  351,  351,  351,  351,
      352,   97,  352,  352,  352,  353,   95,   93,  353,   92,
      353,  353,  353,  354,   91,  354,   90,   89,   88,  354,
      355,   86,  355,  355,  355,  356,   85,  356,  356,  356,
      357,  357,   84,   82,   80,  357,  357,   70,  357,  358,
      358,   69,   63,  358,  358,  358,  358,  358,  358,  358,
      358,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  360,  360,   59,  360,  360,  360,

       58,  360,  360,  360,  360,  360,  361,  361,   55,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  362,
      362,   46,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  364,   45,  364,  365,   44,  365,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  368,   43,  368,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,   41,   40,   39,   37,
       34,   32,   31,   30,   29,   24,   19,   18,   15,   11,
       10,    9,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
    }

/* Table of booleans, true if rule could match eol. */
var yyRuleCanMatchEol = [86]int32{   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 
    0, 0, 1, 1, 0, 0,     };

//line /grammar/lexer.l:1
/*
Copyright (c) 2007-2013. The YARA Authors. All Rights Reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/* Lexical analyzer for YARA */

//line /grammar/lexer.l:72

 

// Define a constant for end-of-file
const eof = 0

// These globals must be accessible to the goyacc parser.
// Bear in mind that the xx prefix is used because the parser is generated
// with this prefix in order to avoid name collisions.
var yylval *xxSymType
var err error // Actually, this is global for lexer action access.





//line /grammar/lexer.go:608
// SKEL ----------------------------------------------------------------

const yyInitial  = 0
const str = 1
const regexp = 2
const include = 3
const comment = 4

const yyReadBufSize = 16384

func (yy *Scanner) input(offset, maxRead int) int {

// [5.0] fread()/read() definition of yy_INPUT goes here ---------------
// nothing here, all moved to skeleton
// SKEL ----------------------------------------------------------------

	if yy.Interactive {
		b := make([]byte, 1)
		var n int
		for n = 0; n < maxRead; n++ {
			nn, err := yy.inputFile.Read(b)
			if err != nil && err != io.EOF {
				log.Panicln("Reading 1 byte:", err)
			}
			if nn < 1 {
				break
			}
			yy.chBuf[offset+n] = b[0]
			if b[0] == '\n' {
				n++
				break
			}
		}
		return n
	}

	n, err := yy.inputFile.Read(yy.chBuf[offset:offset+maxRead])
	if err != nil  && err != io.EOF {
		log.Panicf("Reading %d bytes: %v\n", maxRead, err)
	}
	return n
}

/* [6.0] YY_RULE_SETUP definition goes here --------------------------*/

// SKEL ----------------------------------------------------------------

// The main scanner function which does all the work.
func (yy *Scanner) Lex() YYtype {
	var yyCurrentState int
	var yyBp, yyCp int
	var yyAct int
	var yytext []byte
	var yyleng int
	var yylineno int
	_ = yytext
	_ = yyleng
	_ =  yylineno 

	if !yy.init {
		yy.init = true
		
		if yy.In == nil {
			yy.In = os.Stdin
		}
		if yy.Out == nil {
			yy.Out = os.Stdout
		}
		yy.initBuffer(yy.In)
		yy.loadBufferState()
	}

	yyout := yy.Out
	_ = yyout

// [7.0] user's declarations go here -----------------------------------
//line /grammar/lexer.l:115


//line /grammar/lexer.go:688
// SKEL ----------------------------------------------------------------

	for { // loops until end-of-file is reached

// [8.0] yy''more-related code goes here -------------------------------
// SKEL ----------------------------------------------------------------

		yyCp = yy.cBufP

		/* Support of yytext. */
		yy.chBuf[yyCp] = yy.holdChar

		// yyBp points to the position in yy_ch_buf of the start of
		// the current run.
		yyBp = yyCp

// [9.0] code to set up and find next match goes here ------------------
		yyCurrentState = yy.start
yyMatch:
		for {
			yyC := int(yyEc[yy.chBuf[yyCp]])
						if yyAccept[yyCurrentState] != 0 {
				yy.lastAcceptingState = yyCurrentState
				yy.lastAcceptingCpos = yyCp
			}
			for int(yyChk[int(yyBase[yyCurrentState])+yyC]) != yyCurrentState {
				yyCurrentState = int(yyDef[yyCurrentState])
				if yyCurrentState >= 347 {
					yyC = int(yyMeta[yyC])
				}
			}
			yyCurrentState = int(yyNxt[int(yyBase[yyCurrentState])+yyC])
			yyCp++
			if yyCurrentState == 346 {
				break
			}
		}
		yyCp = yy.lastAcceptingCpos
		yyCurrentState = yy.lastAcceptingState
// SKEL ----------------------------------------------------------------

	yyFindAction:

// [10.0] code to find the action number goes here ---------------------
		yyAct = int(yyAccept[yyCurrentState])
// SKEL ----------------------------------------------------------------

		yy.textPtr = yyBp

// [2.0] code to fiddle yytext and yyleng for yy''more() goes here -------
	yyleng = yyCp - yyBp
// SKEL ----------------------------------------------------------------

		yy.holdChar = yy.chBuf[yyCp]
		yy.chBuf[yyCp] = 0

// [3.0] code to copy yytext_ptr to yytext[] goes here, if %array ------
// SKEL ----------------------------------------------------------------

		yy.cBufP = yyCp
		yytext = yy.chBuf[yy.textPtr:yyCp]
 
// [11.0] code for yylineno update goes here ---------------------------

		if yyAct != yyEndOfBuffer && yyRuleCanMatchEol[yyAct] != 0 {
			for yyl := 0; yyl < yyleng; yyl++ {
				if yytext[yyl] == '\n' {
					yy.Lineno++
				}
			}
		}

// SKEL ----------------------------------------------------------------

	doAction: // This label is used only to access EOF actions.

// [12.0] debug code goes here -----------------------------------------
// SKEL ----------------------------------------------------------------

		switch yyAct { // beginning of action switch

// [13.0] actions go here ----------------------------------------------
			case 0: // must back up
			// undo the effects of yy_DO_BEFORE_ACTION
			yy.chBuf[yyCp] = yy.holdChar
			yyCp = yy.lastAcceptingCpos
			yyCurrentState = yy.lastAcceptingState
			goto yyFindAction

case 1:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }

//line /grammar/lexer.l:117
{
    collect = true
    conditionBuilder.Reset()
    return _CONDITION_
}
case 2:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:123
{ return _DOT_DOT_;     }
case 3:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:124
{ return _LT_;          }
case 4:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:125
{ return _GT_;          }
case 5:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:126
{ return _LE_;          }
case 6:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:127
{ return _GE_;          }
case 7:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:128
{ return _EQ_;          }
case 8:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:129
{ return _NEQ_;         }
case 9:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:130
{ return _SHIFT_LEFT_;  }
case 10:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:131
{ return _SHIFT_RIGHT_; }
case 11:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:132
{ return _PRIVATE_;     }
case 12:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:133
{ return _GLOBAL_;      }
case 13:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:134
{ return _RULE_;        }
case 14:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:135
{ return _META_;        }
case 15:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:136
{ return _STRINGS_;     }
case 16:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:137
{ return _ASCII_;       }
case 17:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:138
{ return _WIDE_;        }
case 18:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:139
{ return _XOR_;         }
case 19:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:140
{ return _BASE64_;      }
case 20:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:141
{ return _BASE64_WIDE_; }
case 21:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:142
{ return _FULLWORD_;    }
case 22:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:143
{ return _NOCASE_;      }
case 23:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:144
{ return _TRUE_;        }
case 24:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:145
{ return _FALSE_;       }
case 25:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:146
{ return _NOT_;         }
case 26:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:147
{ return _AND_;         }
case 27:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:148
{ return _OR_;          }
case 28:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:149
{ return _AT_;          }
case 29:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:150
{ return _IN_;          }
case 30:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:151
{ return _OF_;          }
case 31:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:152
{ return _THEM_;        }
case 32:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:153
{ return _FOR_;         }
case 33:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:154
{ return _ALL_;         }
case 34:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:155
{ return _ANY_;         }
case 35:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:156
{ return _NONE_;        }
case 36:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:157
{ return _ENTRYPOINT_;  }
case 37:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:158
{ return _FILESIZE_;    }
case 38:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:159
{ return _MATCHES_;     }
case 39:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:160
{ return _CONTAINS_;    }
case 40:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:161
{ return _STARTSWITH_;  }
case 41:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:162
{ return _ENDSWITH_;    }
case 42:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:163
{ return _ICONTAINS_;   }
case 43:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:164
{ return _ISTARTSWITH_; }
case 44:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:165
{ return _IENDSWITH_;   }
case 45:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:166
{ return _IEQUALS_;     }
case 46:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:167
{ return _IMPORT_;      }
case 47:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:168
{ return _DEFINED_;     }
case 48:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:170
{ return _LBRACE_; }
case 49:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:171
{ 
                          if collect {
                            collect = false
                          }
                          return _RBRACE_;
                        }
case 50:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:177
{ return _INCLUDE_; }
case 51:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:179
{ yy.start = 1 + 2*  (comment);       }
case 52:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:180
{ yy.start = 1 + 2*  (yyInitial );       }
case 53:
/* rule 53 can match eol */

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:181
{ /* skip comments */   }
case 54:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:184
{ /* skip single-line comments */ }
case (yyEndOfBuffer + yyInitial  + 1) :
	fallthrough
case (yyEndOfBuffer + str + 1) :
	fallthrough
case (yyEndOfBuffer + regexp + 1) :
	fallthrough
case (yyEndOfBuffer + include + 1) :
	fallthrough
case (yyEndOfBuffer + comment + 1) :
//line /grammar/lexer.l:186
{ return eof }
case 55:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:189
{
  yylval.s = string(yytext)
  return _STRING_IDENTIFIER_WITH_WILDCARD_;
}
case 56:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:195
{
  yylval.s = string(yytext)
  return _STRING_IDENTIFIER_;
}
case 57:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:201
{
  return _STRING_COUNT_;
}
case 58:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:206
{
  return _STRING_OFFSET_;
}
case 59:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:211
{
  return _STRING_LENGTH_;
}
case 60:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:216
{
  return _INTEGER_FUNCTION_;
}
case 61:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:221
{
  yylval.s = string(yytext)
  return _IDENTIFIER_;
}
case 62:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:227
{
  s := strings.TrimRight(YYtext, "MKB")
  i, err := strconv.ParseInt(s, 10, 64)
  if err != nil {
      panic(fmt.Errorf("Number conversion error: %s", err))
  }

  if strings.HasSuffix(YYtext, "KB") {
      if i > math.MaxInt64 / 1024 {
          err := fmt.Errorf("Integer overflow: %s; max %d",
              YYtext, math.MaxInt64)
          panic(err)
      } else {
          i *= 1024
      }
  } else if strings.HasSuffix(YYtext, "MB") {
      if i > math.MaxInt64 / 1048576 {
          err := fmt.Errorf("Integer overflow: %s; max %d",
              YYtext, math.MaxInt64)
          panic(err)
      } else {
          i *= 1048576
      }
  }
  yylval.i64 = data.Dec(i)
  return _NUMBER_;
}
case 63:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:255
{
  return _DOUBLE_;
}
case 64:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:259
{
  i, err := strconv.ParseInt(YYtext, 0, 64)
  if err != nil {
      panic(fmt.Errorf("Number conversion error: %s", err))
  }

  yylval.i64 = data.Hex(i)
  return _NUMBER_;
}
case 65:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:269
{
  s := strings.TrimLeft(YYtext, "0o")
  i, err := strconv.ParseInt(s, 8, 64)
  if err != nil {
      panic(fmt.Errorf("Number conversion error: %s", err))
  }

  yylval.i64 = data.Oct(i)
  return _NUMBER_;
}
case 66:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:281
{     /* saw closing quote - all done */

  // NOTE: textBuilder.String() will end with `"` char
  collectText = false
  yylval.s = strings.TrimSuffix(textBuilder.String(), `"`)

  yy.start = 1 + 2*  (yyInitial );

  return _TEXT_STRING_;
}
case 67:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:293
{
}
case 68:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:297
{
}
case 69:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:301
{
}
case 70:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:305
{
}
case 71:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:309
{
}
case 72:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:313
{ }
case 73:
/* rule 73 can match eol */

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:316
{
  panic(fmt.Errorf("unterminated string"))
}
case 74:
/* rule 74 can match eol */

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:321
{
  panic(fmt.Errorf("illegal escape sequence"))
}
case 75:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:326
{
  collectText = false

  txt := strings.TrimSuffix(textBuilder.String(), YYtext)
  
  var mods data.StringModifiers

  for _, c := range YYtext {
      switch c {
      case 'i':
          mods.I = true

      case 's':
          mods.S = true

      case '/':
          // Ignore

      default:
          // Should be impossible
          panic(fmt.Errorf("Invalid regex modifier: %c", c))
      }
  }

  yylval.reg = regexPair {
      txt,
      mods,
  }

  yy.start = 1 + 2*  (yyInitial );
  return _REGEXP_;
}
case 76:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:360
{
}
case 77:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:364
{
}
case 78:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:368
{ }
case 79:
/* rule 79 can match eol */

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:371
{
  panic(fmt.Errorf("unterminated regular expression"))
}
case 80:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:376
{
  collectText = true
  textBuilder.Reset()
  yy.start = 1 + 2*  (str);
}
case 81:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:383
{
  collectText = true
  textBuilder.Reset()
  yy.start = 1 + 2*  (regexp);
}
case 82:
/* rule 82 can match eol */

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:390
{
  // Match hex-digits with whitespace or comments. The latter are stripped
  // out by hex_lexer.l
  // TODO(vmalvarez): Integrate the hex string lexer and parser into this one,
  // by having a single lexer/parser instead of two different ones we can avoid
  // complex regular expressions like the one above, which is actually trying to
  // do some parsing in the lexer.

  // NOTE: The above comment may not apply. We plan to not use hex_lexer.l

  // No need to collect like str and regexp start conditions
  yylval.s = strings.Trim(YYtext, "{}")

  return _HEX_STRING_;
}
case 83:
/* rule 83 can match eol */

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:407
/* skip whitespace */
case 84:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:409
{

  r := int(yytext[0])

  if r >= 32 && r < 127 {
    return r
  }

  panic(fmt.Errorf("non-ascii byte '%d'", r))
}
case 85:

	yylineno = yy.Lineno
	YYtext = string(yytext)

  if collect {
    conditionBuilder.Write(yytext)
  }

  if collectText {
    textBuilder.Write(yytext)
  }


//line /grammar/lexer.l:420
yyout.Write(yytext) 
//line /grammar/lexer.go:2309
// SKEL ----------------------------------------------------------------

		case yyEndOfBuffer:
			/* Amount of text matched not including the EOB char. */
			yyAmountOfMatchedText := yyCp - yy.textPtr - 1

			/* Undo the effects of yy_DO_BEFORE_ACTION. */
			yy.chBuf[yyCp] = yy.holdChar
			 
			if yy.bufferStatus == yyBufferNew {
				/* We're scanning a new file or input source.  It's
				 * possible that this happened because the user
				 * just pointed yyin at a new source and called
				 * yylex().  If so, then we have to assure
				 * consistency between yy_CURRENT_BUFFER and our
				 * globals.  Here is the right place to do so, because
				 * this is the first action (other than possibly a
				 * back-up) that will match for the new input source.
				 */
				yy.nChars = yy.bufNChars
				yy.inputFile = yy.In
				yy.bufferStatus = yyBufferNormal
			}

			/* Note that here we test for yy_c_buf_p "<=" to the position
			 * of the first EOB in the buffer, since yy_c_buf_p will
			 * already have been incremented past the NUL character
			 * (since all states make transitions on EOB to the
			 * end-of-buffer state).  Contrast this with the test
			 * in input().
			 */
			if yy.cBufP <= yy.nChars {
				/* This was really a NUL. */
				var yyNextState int

				yy.cBufP = yy.textPtr + yyAmountOfMatchedText

				yyCurrentState = yy.getPreviousState()

				/* Okay, we're now positioned to make the NUL
				 * transition.  We couldn't have
				 * yy_get_previous_state() go ahead and do it
				 * for us because it doesn't know how to deal
				 * with the possibility of jamming (and we don't
				 * want to build jamming into it because then it
				 * will run more slowly).
				 */

				yyNextState = yy.tryNulTrans(yyCurrentState)

				yyBp = yy.textPtr + 0 

				if yyNextState != 0 {
					/* Consume the NUL. */
					yy.cBufP++
					yyCp = yy.cBufP
					yyCurrentState = yyNextState
					goto yyMatch
				} else {

// [14.0] code to do back-up for compressed tables and set up yy_cp goes here
				yyCp = yy.lastAcceptingCpos
				yyCurrentState = yy.lastAcceptingState
// SKEL ----------------------------------------------------------------

					goto yyFindAction
				}

			} else {

				switch yy.getNextBuffer() {
				case eobActEndOfFile:
					yy.didBufferSwitchOnEof = false

					if yy.Wrap(yy) {
						// Note: because we've taken care in
						// yy_get_next_buffer() to have set up
						// yytext, we can now set up
						// yy.cBufP so that if some total
						// hoser (like flex itself) wants to
						// call the scanner after we return the
						// yy_NULL, it'll still work - another
						// yy_NULL will get returned.
						yy.cBufP = yy.textPtr + 0 

						yyAct = (yyEndOfBuffer + ((yy.start - 1) / 2)  + 1) 
						goto doAction
					} else {
						if !yy.didBufferSwitchOnEof {
							yy.NewFile()
						}
					}
				case eobActContinueScan:
					yy.cBufP = yy.textPtr + yyAmountOfMatchedText

					yyCurrentState = yy.getPreviousState()

					yyCp = yy.cBufP
					yyBp = yy.textPtr + 0 
					goto yyMatch
				case eobActLastMatch:
					yy.cBufP = yy.nChars

					yyCurrentState = yy.getPreviousState()

					yyCp = yy.cBufP
					yyBp = yy.textPtr + 0 
					goto yyFindAction
				}
			}

		default:
			log.Panicln("fatal flex scanner internal error--no action found:", yyAct)
		} // end of action switch
	} // end of scanning one token
	var yyvalue YYtype
	return yyvalue
} // end of yylex

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
func (yy *Scanner) getNextBuffer() int {

	var numberToMove int
	var retval int

	if yy.cBufP > yy.nChars+1 {
		log.Panic("fatal flex scanner internal error--end of buffer missed")
	}

	if !yy.fillBuffer {
		// Don't try to fill the buffer, so this is an EOF.
		if yy.cBufP-yy.textPtr-0  == 1 {
			// We matched a single character, the EOB, so
			// treat this as a final EOF.
			return eobActEndOfFile
		} else {
			// We matched some text prior to the EOB, first
			// process it.
			return eobActLastMatch
		}
	}

	// Try to read more data.

	// First move last chars to start of buffer.
	numberToMove = yy.cBufP - yy.textPtr - 1

	copy(yy.chBuf, yy.chBuf[yy.textPtr:yy.textPtr+numberToMove])

	if yy.bufferStatus == yyBufferEofPending {
		// don't do the read, it's not guaranteed to return an EOF,
		// just force an EOF
		yy.nChars = 0
		yy.bufNChars = 0
	} else {
		numToRead := yy.bufSize - numberToMove - 1

		for numToRead <= 0 {
			// Not enough room in the buffer - grow it.

			yyCBufPOffset := yy.cBufP

			new_size := yy.bufSize * 2

			if new_size <= 0 {
				yy.bufSize += yy.bufSize / 8
			} else {
				yy.bufSize *= 2
			}

			// Include room in for 2 EOB chars.
			bb := make([]byte, yy.bufSize+2-len(yy.chBuf))
			yy.chBuf = append(yy.chBuf, bb...)

			yy.cBufP = yyCBufPOffset

			numToRead = yy.bufSize - numberToMove - 1

		}

		if numToRead > yyReadBufSize {
			numToRead = yyReadBufSize
		}

		// Read in more data.
		yy.nChars = yy.input(numberToMove, numToRead)
		yy.bufNChars = yy.nChars
	}

	if yy.nChars == 0 {
		if numberToMove == 0  {
			retval = eobActEndOfFile
			yy.Restart(yy.In)
		} else {
			retval = eobActLastMatch
			yy.bufferStatus = yyBufferEofPending
		}
	} else {
		retval = eobActContinueScan
	}

	if yy.nChars+numberToMove > yy.bufSize {
		// Extend the array by 50%, plus the number we really need. *
		newSize := yy.nChars + numberToMove + (yy.nChars >> 1)
		if leng := len(yy.chBuf); leng < newSize {
			chBuf := make([]byte, newSize-leng)
			yy.chBuf = append(yy.chBuf, chBuf...)
		}
	}

	yy.nChars += numberToMove
	//yy.bufNChars += numberToMove // TODO: missing in C skel, bug?
	yy.chBuf[yy.nChars] = yyEndOfBufferChar
	yy.chBuf[yy.nChars+1] = yyEndOfBufferChar

	yy.textPtr = 0

	return retval
}

/* yy_get_previous_state - get the state just before the EOB char was reached */
func (yy *Scanner) getPreviousState() int {

	var yyCurrentState int
	var yyCp int

// [15.0] code to get the start state into yy_current_state goes here --
	yyCurrentState = yy.start
// SKEL ----------------------------------------------------------------

	for yyCp = yy.textPtr + 0 ; yyCp < yy.cBufP; yyCp++ {

// [16.0] code to find the next state goes here ------------------------
		yyC := yyIfElse(yy.chBuf[yyCp] != 0, int(yyEc[yy.chBuf[yyCp]]), 1)
				if yyAccept[yyCurrentState] != 0 {
			yy.lastAcceptingState = yyCurrentState
			yy.lastAcceptingCpos = yyCp
		}
		for int(yyChk[int(yyBase[yyCurrentState])+yyC]) != yyCurrentState {
			yyCurrentState = int(yyDef[yyCurrentState])
			if yyCurrentState >= 347 {
				yyC = int(yyMeta[yyC])
			}
		}
		yyCurrentState = int(yyNxt[int(yyBase[yyCurrentState])+yyC])
// SKEL ----------------------------------------------------------------

	}
	return yyCurrentState
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = yy_try_NUL_trans( current_state );
 */
func (yy *Scanner) tryNulTrans(yyCurrentState int) int {

	var yyIsJam bool
	var yyCp int
	_ = yyCp

// [17.0] code to find the next state, and perhaps do backing up, goes here
	yyCp = yy.cBufP

	yyC := 1
		if yyAccept[yyCurrentState] != 0 {
		yy.lastAcceptingState = yyCurrentState
		yy.lastAcceptingCpos = yyCp
	}
	for int(yyChk[int(yyBase[yyCurrentState])+yyC]) != yyCurrentState {
		yyCurrentState = int(yyDef[yyCurrentState])
		if yyCurrentState >= 347 {
			yyC = int(yyMeta[yyC])
		}
	}
	yyCurrentState = int(yyNxt[int(yyBase[yyCurrentState])+yyC])
	if yyCurrentState == 346 {
		yyIsJam = true
	}
// SKEL ----------------------------------------------------------------

	if yyIsJam {
		return 0
	}
	return yyCurrentState
}

func (yy *Scanner) Input() (byte, error) {

	yy.chBuf[yy.cBufP] = yy.holdChar

	if yy.chBuf[yy.cBufP] == yyEndOfBufferChar {
		// yy_c_buf_p now points to the character we want to return.
		// If this occurs *before* the EOB characters, then it's a
		// valid NUL; if not, then we've hit the end of the buffer.
		if yy.cBufP < yy.nChars {
			// This was really a NUL.
			yy.chBuf[yy.cBufP] = 0
		} else {
			// need more input
			offset := yy.cBufP - yy.textPtr
			yy.cBufP++

			switch yy.getNextBuffer() {
			case eobActLastMatch:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
				yy.Restart(yy.In)

				fallthrough

			case eobActEndOfFile:
				if yy.Wrap(yy) {
					return 0, io.EOF
				}

				if !yy.didBufferSwitchOnEof {
					yy.Restart(yy.In)
				}

				return yy.Input()

			case eobActContinueScan:
				yy.cBufP = yy.textPtr + offset
			}
		}
	}

	c := yy.chBuf[yy.cBufP]
	yy.chBuf[yy.cBufP] = 0	// preserve yytext
	yy.cBufP++
	yy.holdChar = yy.chBuf[yy.cBufP]

// [19.0] update BOL and yylineno --------------------------------------
	if c == '\n' {
		yy.Lineno++
	}
// SKEL ----------------------------------------------------------------

return c, nil
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c yyInitial  .
 */
func (yy *Scanner) Restart(input_file io.Reader) {
	yy.initBuffer(input_file)
	yy.loadBufferState()
}

func (yy *Scanner) loadBufferState() {
	yy.nChars = yy.bufNChars
	yy.cBufP = yy.bufPos
	yy.textPtr = yy.cBufP
	yy.In = yy.inputFile
	yy.holdChar = yy.chBuf[yy.cBufP]
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
func (yy *Scanner) initBuffer(file io.Reader) {

	yy.flushBuffer()

	yy.inputFile = file

	yy.fillBuffer = true

	yy.Interactive = yy.IsInteractive(file)

}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
func (yy *Scanner) flushBuffer() {

	yy.bufNChars = 0

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	yy.chBuf[0] = yyEndOfBufferChar
	yy.chBuf[1] = yyEndOfBufferChar

	yy.bufPos = 0

	yy.atBol = 1
	yy.bufferStatus = yyBufferNew

	yy.loadBufferState()
}

func yyIfElse(b bool, i1, i2 int) int {
	if b {
		return i1
	}
	return i2
}

func YYmain(filenames ...string) (interface{}, error) {

	var errval error

	yy := NewScanner()

	yy.Filename = "<stdin>"

	if len(filenames) > 0 {
		yy.Filename = filenames[0]
		yy.In, errval = os.Open(yy.Filename)
		if errval != nil {
			return nil, errval
		}
		yy.Wrap = func(yyy *Scanner) bool {
			if len(filenames) == 0 {
				// should not happen
				return true
			}
			yyy.In.(*os.File).Close()
			filenames = filenames[1:]
			if len(filenames) == 0 {
				return true
			}
			yyy.Filename = filenames[0]
			yyy.In, errval = os.Open(yyy.Filename)
			if errval != nil {
				return true
			}
			return false
		}
	}

	return yy.Lex(), errval

}

// END OF SKELL --------------------------------------------------------
//line /grammar/lexer.l:420



