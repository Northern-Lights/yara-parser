// Code generated by goyacc -v /dev/null -p xx -o /grammar/parser.go /grammar/grammar.y. DO NOT EDIT.

//line /grammar/grammar.y:31
package grammar

import __yyfmt__ "fmt"

//line /grammar/grammar.y:31
import (
	"fmt"
	"strings"

	"github.com/Northern-Lights/yara-parser/data"
)

var ParsedRuleset data.RuleSet

type regexPair struct {
	text string
	mods data.StringModifiers
}

//line /grammar/grammar.y:136
type xxSymType struct {
	yys int
	i64 data.Int
	s   string
	ss  []string

	rm  data.RuleModifiers
	m   data.Metas
	mp  data.Meta
	mps data.Metas
	mod data.StringModifiers
	reg regexPair
	ys  data.String
	yss data.Strings
	yr  data.Rule
}

const _END_OF_INCLUDED_FILE_ = 57346
const _DOT_DOT_ = 57347
const _RULE_ = 57348
const _PRIVATE_ = 57349
const _GLOBAL_ = 57350
const _META_ = 57351
const _STRINGS_ = 57352
const _CONDITION_ = 57353
const _IDENTIFIER_ = 57354
const _STRING_IDENTIFIER_ = 57355
const _STRING_COUNT_ = 57356
const _STRING_OFFSET_ = 57357
const _STRING_LENGTH_ = 57358
const _STRING_IDENTIFIER_WITH_WILDCARD_ = 57359
const _NUMBER_ = 57360
const _DOUBLE_ = 57361
const _INTEGER_FUNCTION_ = 57362
const _TEXT_STRING_ = 57363
const _HEX_STRING_ = 57364
const _REGEXP_ = 57365
const _ASCII_ = 57366
const _WIDE_ = 57367
const _XOR_ = 57368
const _BASE64_ = 57369
const _BASE64_WIDE_ = 57370
const _NOCASE_ = 57371
const _FULLWORD_ = 57372
const _AT_ = 57373
const _FILESIZE_ = 57374
const _ENTRYPOINT_ = 57375
const _ALL_ = 57376
const _ANY_ = 57377
const _IN_ = 57378
const _OF_ = 57379
const _FOR_ = 57380
const _THEM_ = 57381
const _MATCHES_ = 57382
const _CONTAINS_ = 57383
const _IMPORT_ = 57384
const _TRUE_ = 57385
const _FALSE_ = 57386
const _LBRACE_ = 57387
const _RBRACE_ = 57388
const _INCLUDE_ = 57389
const _OR_ = 57390
const _AND_ = 57391
const _EQ_ = 57392
const _NEQ_ = 57393
const _LT_ = 57394
const _LE_ = 57395
const _GT_ = 57396
const _GE_ = 57397
const _SHIFT_LEFT_ = 57398
const _SHIFT_RIGHT_ = 57399
const _NOT_ = 57400
const UNARY_MINUS = 57401

var xxToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_END_OF_INCLUDED_FILE_",
	"_DOT_DOT_",
	"_RULE_",
	"_PRIVATE_",
	"_GLOBAL_",
	"_META_",
	"_STRINGS_",
	"_CONDITION_",
	"_IDENTIFIER_",
	"_STRING_IDENTIFIER_",
	"_STRING_COUNT_",
	"_STRING_OFFSET_",
	"_STRING_LENGTH_",
	"_STRING_IDENTIFIER_WITH_WILDCARD_",
	"_NUMBER_",
	"_DOUBLE_",
	"_INTEGER_FUNCTION_",
	"_TEXT_STRING_",
	"_HEX_STRING_",
	"_REGEXP_",
	"_ASCII_",
	"_WIDE_",
	"_XOR_",
	"_BASE64_",
	"_BASE64_WIDE_",
	"_NOCASE_",
	"_FULLWORD_",
	"_AT_",
	"_FILESIZE_",
	"_ENTRYPOINT_",
	"_ALL_",
	"_ANY_",
	"_IN_",
	"_OF_",
	"_FOR_",
	"_THEM_",
	"_MATCHES_",
	"_CONTAINS_",
	"_IMPORT_",
	"_TRUE_",
	"_FALSE_",
	"_LBRACE_",
	"_RBRACE_",
	"_INCLUDE_",
	"_OR_",
	"_AND_",
	"'|'",
	"'^'",
	"'&'",
	"_EQ_",
	"_NEQ_",
	"_LT_",
	"_LE_",
	"_GT_",
	"_GE_",
	"_SHIFT_LEFT_",
	"_SHIFT_RIGHT_",
	"'+'",
	"'-'",
	"'*'",
	"'\\\\'",
	"'%'",
	"_NOT_",
	"'~'",
	"UNARY_MINUS",
	"':'",
	"'='",
	"'('",
	"')'",
	"'.'",
	"'['",
	"']'",
	"','",
}
var xxStatenames = [...]string{}

const xxEofCode = 1
const xxErrCode = 2
const xxInitialStackSize = 16

//line /grammar/grammar.y:872

//line yacctab:1
var xxExca = [...]int{
	-1, 1,
	1, -1,
	-2, 15,
	-1, 42,
	23, 34,
	-2, 32,
	-1, 52,
	37, 110,
	-2, 96,
	-1, 107,
	37, 110,
	-2, 96,
	-1, 159,
	72, 67,
	76, 67,
	-2, 70,
	-1, 198,
	72, 68,
	76, 68,
	-2, 70,
}

const xxPrivate = 57344

const xxLast = 398

var xxAct = [...]int{

	52, 195, 108, 141, 49, 147, 73, 53, 64, 65,
	66, 175, 61, 62, 60, 63, 223, 74, 207, 70,
	224, 114, 208, 112, 113, 111, 58, 59, 71, 72,
	110, 230, 54, 80, 79, 219, 221, 50, 51, 96,
	94, 95, 220, 48, 174, 218, 150, 227, 97, 98,
	89, 90, 91, 92, 93, 102, 68, 232, 107, 105,
	56, 69, 106, 216, 173, 57, 96, 94, 95, 115,
	116, 149, 204, 201, 200, 97, 98, 89, 90, 91,
	92, 93, 199, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 122, 142, 148, 146, 109, 42, 38, 213, 193,
	152, 153, 154, 40, 156, 81, 82, 80, 79, 159,
	28, 26, 17, 164, 165, 96, 94, 95, 87, 88,
	83, 85, 84, 86, 97, 98, 89, 90, 91, 92,
	93, 229, 55, 166, 91, 92, 93, 151, 80, 79,
	79, 168, 73, 39, 64, 65, 66, 95, 61, 62,
	60, 63, 18, 74, 97, 98, 89, 90, 91, 92,
	93, 143, 58, 59, 71, 72, 96, 94, 95, 104,
	198, 144, 167, 74, 118, 97, 98, 89, 90, 91,
	92, 93, 202, 35, 99, 44, 205, 101, 43, 100,
	5, 172, 68, 77, 211, 215, 145, 69, 210, 117,
	217, 103, 97, 98, 89, 90, 91, 92, 93, 225,
	46, 47, 96, 94, 95, 228, 226, 13, 41, 30,
	231, 97, 98, 89, 90, 91, 92, 93, 7, 45,
	8, 209, 73, 4, 64, 65, 66, 171, 61, 62,
	60, 63, 78, 74, 196, 96, 94, 95, 197, 37,
	36, 155, 58, 59, 97, 98, 89, 90, 91, 92,
	93, 96, 94, 95, 31, 23, 20, 212, 14, 33,
	97, 98, 89, 90, 91, 92, 93, 25, 9, 11,
	12, 191, 68, 170, 96, 94, 95, 69, 22, 163,
	194, 103, 169, 97, 98, 89, 90, 91, 92, 93,
	81, 82, 214, 121, 120, 206, 151, 222, 203, 192,
	96, 94, 95, 87, 88, 83, 85, 84, 86, 97,
	98, 89, 90, 91, 92, 93, 96, 94, 95, 89,
	90, 91, 92, 93, 158, 97, 98, 89, 90, 91,
	92, 93, 94, 95, 181, 157, 67, 76, 75, 32,
	97, 98, 89, 90, 91, 92, 93, 190, 27, 15,
	1, 178, 177, 182, 183, 184, 179, 180, 6, 10,
	119, 162, 161, 185, 187, 186, 160, 176, 34, 188,
	189, 24, 29, 21, 19, 16, 2, 3,
}
var xxPact = [...]int{

	-1000, 196, -1000, -1000, 219, -1000, 282, 206, -1000, 266,
	-1000, -1000, -1000, -1000, -1000, 53, 117, 264, 289, 263,
	-1000, 277, 52, -1000, -1000, 51, 262, 268, 247, 262,
	-1000, 37, 107, 44, 247, -1000, 36, -1000, 177, -1000,
	-6, -1000, 181, -1000, -1000, 234, -1000, -1000, 100, -1000,
	-1000, -1000, 270, 163, 140, 142, -6, -6, -1000, -1000,
	34, -1000, -1000, -1000, -1000, -44, -49, -50, 230, 230,
	-1000, -1000, -1000, -1000, -1000, 188, 161, -1000, -1000, -1000,
	-1000, 160, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	31, 169, 16, 230, 32, -1000, -26, 75, 100, 230,
	230, 230, 249, 230, -6, -1000, -1000, -1000, -1000, 292,
	-6, -6, -1000, 16, 16, 16, 16, 16, 16, 16,
	81, 81, -1000, -1000, -1000, 105, 153, 301, 278, 278,
	16, -1000, 230, -1000, 146, 32, 244, -1000, -1000, -1000,
	-1000, -1000, 221, 172, 126, -1000, -11, -28, -65, -1000,
	347, 360, -1000, -1000, -1000, 101, 286, -1000, 40, 241,
	-1000, -1000, -1000, -1000, -1000, -6, -1000, -1000, -1000, -1000,
	-1000, -1000, 11, 3, 2, -1000, -1000, -1000, -1000, -1000,
	-1000, 230, 1, -1000, -54, -1000, -1000, -1000, -1000, 223,
	187, 183, 205, 39, 230, -1000, -8, -1000, 241, -27,
	-30, -36, -1000, -1000, -56, 286, -6, -1000, -1000, 208,
	-1000, -1000, -24, -1000, 230, 69, -41, -6, 16, -1000,
	-1000, -15, -1000,
}
var xxPgo = [...]int{

	0, 397, 396, 395, 394, 393, 392, 229, 391, 388,
	193, 387, 386, 383, 382, 381, 380, 379, 378, 370,
	369, 368, 359, 2, 358, 357, 356, 0, 355, 344,
	4, 19, 3, 142, 319, 318, 317, 5, 315, 314,
	313, 312, 302, 300, 1,
}
var xxR1 = [...]int{

	0, 19, 19, 19, 19, 19, 1, 20, 21, 2,
	5, 5, 8, 8, 22, 18, 18, 17, 17, 3,
	3, 4, 4, 6, 6, 7, 7, 7, 7, 7,
	9, 9, 24, 10, 25, 10, 10, 12, 12, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 14, 14, 13, 13, 13, 13, 13, 16, 16,
	15, 26, 26, 26, 26, 28, 28, 29, 29, 31,
	23, 30, 30, 30, 30, 30, 30, 30, 30, 34,
	36, 30, 38, 30, 30, 30, 39, 30, 40, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 35, 35,
	32, 41, 41, 42, 37, 37, 43, 43, 44, 44,
	33, 33, 33, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27,
}
var xxR2 = [...]int{

	0, 0, 2, 2, 3, 2, 2, 0, 0, 11,
	0, 3, 0, 3, 3, 0, 2, 1, 1, 0,
	2, 1, 2, 1, 2, 3, 3, 4, 3, 3,
	1, 2, 0, 5, 0, 5, 4, 0, 2, 1,
	1, 1, 1, 1, 1, 4, 6, 1, 4, 1,
	4, 0, 2, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 3, 4, 4, 0, 1, 1, 3, 1,
	1, 1, 1, 3, 3, 1, 3, 3, 3, 0,
	0, 11, 0, 9, 3, 2, 0, 4, 0, 4,
	3, 3, 3, 3, 3, 3, 1, 3, 3, 1,
	5, 1, 3, 0, 4, 1, 1, 3, 1, 1,
	1, 1, 1, 3, 1, 1, 4, 1, 1, 1,
	1, 4, 1, 4, 1, 1, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 1,
}
var xxChk = [...]int{

	-1000, -19, -2, -1, 47, 4, -18, 42, 21, 6,
	-17, 7, 8, 21, 12, -20, -3, 69, 45, -4,
	12, -5, 9, 12, -8, 10, 69, -21, 69, -6,
	-7, 12, -22, 11, -9, -10, 13, -7, 70, 46,
	69, -10, 70, 21, 18, 62, 43, 44, -23, -30,
	43, 44, -27, 13, 38, -33, 66, 71, 32, 33,
	20, 18, 19, 21, 14, 15, 16, -26, 62, 67,
	-31, 34, 35, 12, 23, -24, -25, 22, 18, 49,
	48, 40, 41, 55, 57, 56, 58, 53, 54, 61,
	62, 63, 64, 65, 51, 52, 50, 59, 60, 31,
	36, -33, -27, 71, 37, -23, -30, -27, -23, 71,
	74, 74, 73, 74, 71, -27, -27, 21, 23, -16,
	-39, -40, -31, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -32, 71, 2, 12, 37, -27, -37, 71, 39,
	72, 72, -27, -27, -27, 12, -27, -28, -29, -30,
	-12, -14, -15, 7, -23, -23, -27, 36, -37, -42,
	72, 75, 75, 75, 72, 76, -11, 25, 24, 29,
	30, 7, 26, 27, 28, -13, 25, 24, 29, 30,
	7, 5, -34, 69, -43, -44, 13, 17, -30, 71,
	71, 71, -27, -35, 71, -32, -38, 72, 76, 18,
	21, 21, 72, 69, -41, -27, 71, -44, 72, 62,
	72, 72, -36, 72, 76, -23, 18, 71, -27, 72,
	72, -23, 72,
}
var xxDef = [...]int{

	1, -2, 2, 3, 0, 5, 0, 0, 4, 0,
	16, 17, 18, 6, 7, 19, 0, 0, 10, 20,
	21, 12, 0, 22, 8, 0, 0, 0, 0, 11,
	23, 0, 0, 0, 13, 30, 0, 24, 0, 9,
	0, 31, -2, 25, 26, 0, 28, 29, 14, 70,
	71, 72, -2, 75, 0, 0, 0, 0, 114, 115,
	0, 117, 118, 119, 120, 122, 124, 125, 0, 0,
	138, 111, 112, 61, 69, 0, 0, 58, 27, 86,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 85, 70, -2, 0, 0,
	0, 0, 0, 0, 65, 126, 135, 37, 51, 36,
	0, 0, 73, 74, 90, 91, 92, 93, 94, 95,
	127, 128, 129, 130, 131, 132, 133, 134, 136, 137,
	76, 77, 0, 78, 0, 0, 0, 84, 103, 105,
	97, 113, 0, 0, 0, 62, 0, 0, 66, -2,
	33, 35, 59, 60, 87, 89, 0, 79, 0, 0,
	116, 121, 123, 63, 64, 0, 38, 39, 40, 41,
	42, 43, 44, 47, 49, 52, 53, 54, 55, 56,
	57, 0, 0, 82, 0, 106, 108, 109, -2, 0,
	0, 0, 0, 0, 0, 99, 0, 104, 0, 0,
	0, 0, 100, 80, 0, 101, 0, 107, 45, 0,
	48, 50, 0, 98, 0, 0, 0, 0, 102, 83,
	46, 0, 81,
}
var xxTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 65, 52, 3,
	71, 72, 63, 61, 76, 62, 73, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 69, 3,
	3, 70, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 74, 64, 75, 51, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 50, 3, 67,
}
var xxTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 66, 68,
}
var xxTok3 = [...]int{
	0,
}

var xxErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	xxDebug        = 0
	xxErrorVerbose = false
)

type xxLexer interface {
	Lex(lval *xxSymType) int
	Error(s string)
}

type xxParser interface {
	Parse(xxLexer) int
	Lookahead() int
}

type xxParserImpl struct {
	lval  xxSymType
	stack [xxInitialStackSize]xxSymType
	char  int
}

func (p *xxParserImpl) Lookahead() int {
	return p.char
}

func xxNewParser() xxParser {
	return &xxParserImpl{}
}

const xxFlag = -1000

func xxTokname(c int) string {
	if c >= 1 && c-1 < len(xxToknames) {
		if xxToknames[c-1] != "" {
			return xxToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func xxStatname(s int) string {
	if s >= 0 && s < len(xxStatenames) {
		if xxStatenames[s] != "" {
			return xxStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func xxErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !xxErrorVerbose {
		return "syntax error"
	}

	for _, e := range xxErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + xxTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := xxPact[state]
	for tok := TOKSTART; tok-1 < len(xxToknames); tok++ {
		if n := base + tok; n >= 0 && n < xxLast && xxChk[xxAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if xxDef[state] == -2 {
		i := 0
		for xxExca[i] != -1 || xxExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; xxExca[i] >= 0; i += 2 {
			tok := xxExca[i]
			if tok < TOKSTART || xxExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if xxExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += xxTokname(tok)
	}
	return res
}

func xxlex1(lex xxLexer, lval *xxSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = xxTok1[0]
		goto out
	}
	if char < len(xxTok1) {
		token = xxTok1[char]
		goto out
	}
	if char >= xxPrivate {
		if char < xxPrivate+len(xxTok2) {
			token = xxTok2[char-xxPrivate]
			goto out
		}
	}
	for i := 0; i < len(xxTok3); i += 2 {
		token = xxTok3[i+0]
		if token == char {
			token = xxTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = xxTok2[1] /* unknown char */
	}
	if xxDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", xxTokname(token), uint(char))
	}
	return char, token
}

func xxParse(xxlex xxLexer) int {
	return xxNewParser().Parse(xxlex)
}

func (xxrcvr *xxParserImpl) Parse(xxlex xxLexer) int {
	var xxn int
	var xxVAL xxSymType
	var xxDollar []xxSymType
	_ = xxDollar // silence set and not used
	xxS := xxrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	xxstate := 0
	xxrcvr.char = -1
	xxtoken := -1 // xxrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		xxstate = -1
		xxrcvr.char = -1
		xxtoken = -1
	}()
	xxp := -1
	goto xxstack

ret0:
	return 0

ret1:
	return 1

xxstack:
	/* put a state and value onto the stack */
	if xxDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", xxTokname(xxtoken), xxStatname(xxstate))
	}

	xxp++
	if xxp >= len(xxS) {
		nyys := make([]xxSymType, len(xxS)*2)
		copy(nyys, xxS)
		xxS = nyys
	}
	xxS[xxp] = xxVAL
	xxS[xxp].yys = xxstate

xxnewstate:
	xxn = xxPact[xxstate]
	if xxn <= xxFlag {
		goto xxdefault /* simple state */
	}
	if xxrcvr.char < 0 {
		xxrcvr.char, xxtoken = xxlex1(xxlex, &xxrcvr.lval)
	}
	xxn += xxtoken
	if xxn < 0 || xxn >= xxLast {
		goto xxdefault
	}
	xxn = xxAct[xxn]
	if xxChk[xxn] == xxtoken { /* valid shift */
		xxrcvr.char = -1
		xxtoken = -1
		xxVAL = xxrcvr.lval
		xxstate = xxn
		if Errflag > 0 {
			Errflag--
		}
		goto xxstack
	}

xxdefault:
	/* default state action */
	xxn = xxDef[xxstate]
	if xxn == -2 {
		if xxrcvr.char < 0 {
			xxrcvr.char, xxtoken = xxlex1(xxlex, &xxrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if xxExca[xi+0] == -1 && xxExca[xi+1] == xxstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			xxn = xxExca[xi+0]
			if xxn < 0 || xxn == xxtoken {
				break
			}
		}
		xxn = xxExca[xi+1]
		if xxn < 0 {
			goto ret0
		}
	}
	if xxn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			xxlex.Error(xxErrorMessage(xxstate, xxtoken))
			Nerrs++
			if xxDebug >= 1 {
				__yyfmt__.Printf("%s", xxStatname(xxstate))
				__yyfmt__.Printf(" saw %s\n", xxTokname(xxtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for xxp >= 0 {
				xxn = xxPact[xxS[xxp].yys] + xxErrCode
				if xxn >= 0 && xxn < xxLast {
					xxstate = xxAct[xxn] /* simulate a shift of "error" */
					if xxChk[xxstate] == xxErrCode {
						goto xxstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if xxDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", xxS[xxp].yys)
				}
				xxp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if xxDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", xxTokname(xxtoken))
			}
			if xxtoken == xxEofCode {
				goto ret1
			}
			xxrcvr.char = -1
			xxtoken = -1
			goto xxnewstate /* try again in the same state */
		}
	}

	/* reduction by production xxn */
	if xxDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", xxn, xxStatname(xxstate))
	}

	xxnt := xxn
	xxpt := xxp
	_ = xxpt // guard against "declared and not used"

	xxp -= xxR2[xxn]
	// xxp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if xxp+1 >= len(xxS) {
		nyys := make([]xxSymType, len(xxS)*2)
		copy(nyys, xxS)
		xxS = nyys
	}
	xxVAL = xxS[xxp+1]

	/* consult goto table to find next state */
	xxn = xxR1[xxn]
	xxg := xxPgo[xxn]
	xxj := xxg + xxS[xxp].yys + 1

	if xxj >= xxLast {
		xxstate = xxAct[xxg]
	} else {
		xxstate = xxAct[xxj]
		if xxChk[xxstate] != -xxn {
			xxstate = xxAct[xxg]
		}
	}
	// dummy call; replaced with literal code
	switch xxnt {

	case 2:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:157
		{
			ParsedRuleset.Rules = append(ParsedRuleset.Rules, xxDollar[2].yr)
		}
	case 3:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:160
		{
			ParsedRuleset.Imports = append(ParsedRuleset.Imports, xxDollar[2].s)
		}
	case 4:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:163
		{
			ParsedRuleset.Includes = append(ParsedRuleset.Includes, xxDollar[3].s)
		}
	case 5:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:166
		{
		}
	case 6:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:172
		{
			xxVAL.s = xxDollar[2].s
		}
	case 7:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:180
		{
			xxVAL.yr.Modifiers = xxDollar[1].rm
			xxVAL.yr.Identifier = xxDollar[3].s

			// Forbid duplicate rules
			for _, r := range ParsedRuleset.Rules {
				if xxDollar[3].s == r.Identifier {
					err := fmt.Errorf(`Duplicate rule "%s"`, xxDollar[3].s)
					panic(err)
				}
			}
		}
	case 8:
		xxDollar = xxS[xxpt-8 : xxpt+1]
//line /grammar/grammar.y:193
		{
			// $4 is the rule created in above action
			xxDollar[4].yr.Tags = xxDollar[5].ss

			// Forbid duplicate tags
			idx := make(map[string]struct{})
			for _, t := range xxDollar[5].ss {
				if _, had := idx[t]; had {
					msg := fmt.Sprintf(`grammar: Rule "%s" has duplicate tag "%s"`,
						xxDollar[4].yr.Identifier,
						t)
					panic(msg)
				}
				idx[t] = struct{}{}
			}

			xxDollar[4].yr.Meta = xxDollar[7].m

			xxDollar[4].yr.Strings = xxDollar[8].yss

			// Forbid duplicate string IDs, except `$` (anonymous)
			idx = make(map[string]struct{})
			for _, s := range xxDollar[8].yss {
				if s.ID == "$" {
					continue
				}
				if _, had := idx[s.ID]; had {
					msg := fmt.Sprintf(
						`grammar: Rule "%s" has duplicated string "%s"`,
						xxDollar[4].yr.Identifier,
						s.ID)
					panic(msg)
				}
				idx[s.ID] = struct{}{}
			}
		}
	case 9:
		xxDollar = xxS[xxpt-11 : xxpt+1]
//line /grammar/grammar.y:230
		{
			c := conditionBuilder.String()
			c = strings.TrimLeft(c, ":\n\r\t ")
			c = strings.TrimRight(c, "}\n\r\t ")
			xxDollar[4].yr.Condition = c
			xxVAL.yr = xxDollar[4].yr
		}
	case 10:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:242
		{

		}
	case 11:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:246
		{
			xxVAL.m = make(data.Metas, 0, len(xxDollar[3].mps))
			for _, mpair := range xxDollar[3].mps {
				// YARA is ok with duplicate keys; we follow suit
				xxVAL.m = append(xxVAL.m, mpair)
			}
		}
	case 12:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:258
		{
			xxVAL.yss = data.Strings{}
		}
	case 13:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:262
		{
			xxVAL.yss = xxDollar[3].yss
		}
	case 15:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:274
		{
			xxVAL.rm = data.RuleModifiers{}
		}
	case 16:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:275
		{
			xxVAL.rm.Private = xxVAL.rm.Private || xxDollar[2].rm.Private
			xxVAL.rm.Global = xxVAL.rm.Global || xxDollar[2].rm.Global
		}
	case 17:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:283
		{
			xxVAL.rm.Private = true
		}
	case 18:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:284
		{
			xxVAL.rm.Global = true
		}
	case 19:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:290
		{
			xxVAL.ss = []string{}
		}
	case 20:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:294
		{
			xxVAL.ss = xxDollar[2].ss
		}
	case 21:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:302
		{
			xxVAL.ss = []string{xxDollar[1].s}
		}
	case 22:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:306
		{
			xxVAL.ss = append(xxDollar[1].ss, xxDollar[2].s)
		}
	case 23:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:314
		{
			xxVAL.mps = data.Metas{xxDollar[1].mp}
		}
	case 24:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:315
		{
			xxVAL.mps = append(xxVAL.mps, xxDollar[2].mp)
		}
	case 25:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:321
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, xxDollar[3].s}
		}
	case 26:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:325
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, xxDollar[3].i64}
		}
	case 27:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:329
		{
			switch xxDollar[4].i64.(type) {
			case data.Dec:
				xxDollar[4].i64 = data.Dec(-xxDollar[4].i64.Value())
			case data.Oct:
				xxDollar[4].i64 = data.Oct(-xxDollar[4].i64.Value())
			case data.Hex:
				xxDollar[4].i64 = data.Hex(-xxDollar[4].i64.Value())
			default:
				panic(fmt.Errorf(`unknown integer format type %T`, xxDollar[4].i64))
			}
			xxVAL.mp = data.Meta{xxDollar[1].s, -xxDollar[4].i64.Value()}
		}
	case 28:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:343
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, true}
		}
	case 29:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:347
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, false}
		}
	case 30:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:354
		{
			xxVAL.yss = data.Strings{xxDollar[1].ys}
		}
	case 31:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:355
		{
			xxVAL.yss = append(xxDollar[1].yss, xxDollar[2].ys)
		}
	case 32:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:361
		{
			xxVAL.ys.Type = data.TypeString
			xxVAL.ys.ID = xxDollar[1].s
		}
	case 33:
		xxDollar = xxS[xxpt-5 : xxpt+1]
//line /grammar/grammar.y:366
		{
			xxDollar[3].ys.Text = xxDollar[4].s
			xxDollar[3].ys.Modifiers = xxDollar[5].mod

			xxVAL.ys = xxDollar[3].ys
		}
	case 34:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:373
		{
			xxVAL.ys.Type = data.TypeRegex
			xxVAL.ys.ID = xxDollar[1].s
		}
	case 35:
		xxDollar = xxS[xxpt-5 : xxpt+1]
//line /grammar/grammar.y:378
		{
			xxDollar[3].ys.Text = xxDollar[4].reg.text

			xxDollar[5].mod.I = xxDollar[4].reg.mods.I
			xxDollar[5].mod.S = xxDollar[4].reg.mods.S

			xxDollar[3].ys.Modifiers = xxDollar[5].mod

			xxVAL.ys = xxDollar[3].ys
		}
	case 36:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:389
		{
			xxVAL.ys.Type = data.TypeHexString
			xxVAL.ys.ID = xxDollar[1].s
			xxVAL.ys.Text = xxDollar[3].s
			xxVAL.ys.Modifiers = xxDollar[4].mod
		}
	case 37:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:399
		{
			xxVAL.mod = data.StringModifiers{}
		}
	case 38:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:402
		{
			xor := xxDollar[1].mod.Xor
			if xor == nil {
				xor = xxDollar[2].mod.Xor
			} else if xxDollar[2].mod.Xor != nil {
				panic(data.NewYARAError(
					data.ErrInvalidStringModifierCombo,
					`repeated "xor" modifier`))
			}

			xxVAL.mod = data.StringModifiers{
				Wide:     xxDollar[1].mod.Wide || xxDollar[2].mod.Wide,
				ASCII:    xxDollar[1].mod.ASCII || xxDollar[2].mod.ASCII,
				Nocase:   xxDollar[1].mod.Nocase || xxDollar[2].mod.Nocase,
				Fullword: xxDollar[1].mod.Fullword || xxDollar[2].mod.Fullword,
				Private:  xxDollar[1].mod.Private || xxDollar[2].mod.Private,
				Xor:      xor,
			}

			if xxVAL.mod.Xor != nil && xxVAL.mod.Nocase {
				panic(data.NewYARAError(
					data.ErrInvalidStringModifierCombo,
					`xor nocase`))
			}
		}
	case 39:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:431
		{
			xxVAL.mod.Wide = true
		}
	case 40:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:432
		{
			xxVAL.mod.ASCII = true
		}
	case 41:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:433
		{
			xxVAL.mod.Nocase = true
		}
	case 42:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:434
		{
			xxVAL.mod.Fullword = true
		}
	case 43:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:435
		{
			xxVAL.mod.Private = true
		}
	case 44:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:437
		{
			xxVAL.mod.Xor = data.Xor{}
		}
	case 45:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:441
		{
			if xxDollar[3].i64.Value() < 0 || xxDollar[3].i64.Value() > 255 {
				msg := fmt.Sprintf(`xor value %s outside of [0,255]`, xxDollar[3].i64)
				panic(data.NewYARAError(data.ErrInvalidStringModifierCombo, msg))
			}

			xxVAL.mod.Xor = data.Xor{xxDollar[3].i64}
		}
	case 46:
		xxDollar = xxS[xxpt-6 : xxpt+1]
//line /grammar/grammar.y:450
		{
			if xxDollar[3].i64.Value() < 0 || xxDollar[5].i64.Value() > 255 || xxDollar[3].i64.Value() > xxDollar[5].i64.Value() {
				msg := fmt.Sprintf(`xor value %s or %s outside of [0,255]`, xxDollar[3].i64, xxDollar[5].i64)
				panic(data.NewYARAError(data.ErrInvalidStringModifierCombo, msg))
			}

			xxVAL.mod.Xor = data.Xor{xxDollar[3].i64, xxDollar[5].i64}
		}
	case 47:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:459
		{
			xxVAL.mod.Base64 = data.Base64{}
		}
	case 48:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:463
		{
			if len(xxDollar[3].s) != 64 {
				err := fmt.Errorf(`base64 value must be 64 characters; got %d`, len(xxDollar[3].s))
				panic(err)
			}
			xxVAL.mod.Base64 = data.Base64(xxDollar[3].s)
		}
	case 49:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:471
		{
			xxVAL.mod.Base64Wide = data.Base64{}
		}
	case 50:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:475
		{
			if len(xxDollar[3].s) != 64 {
				err := fmt.Errorf(`base64wide value must be 64 characters; got %d`, len(xxDollar[3].s))
				panic(err)
			}
			xxVAL.mod.Base64Wide = data.Base64(xxDollar[3].s)
		}
	case 51:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:487
		{
			xxVAL.mod = data.StringModifiers{}
		}
	case 52:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:490
		{
			xxVAL.mod = data.StringModifiers{
				Wide:     xxDollar[1].mod.Wide || xxDollar[2].mod.Wide,
				ASCII:    xxDollar[1].mod.ASCII || xxDollar[2].mod.ASCII,
				Nocase:   xxDollar[1].mod.Nocase || xxDollar[2].mod.Nocase,
				Fullword: xxDollar[1].mod.Fullword || xxDollar[2].mod.Fullword,
				Private:  xxDollar[1].mod.Private || xxDollar[2].mod.Private,
			}
		}
	case 53:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:503
		{
			xxVAL.mod.Wide = true
		}
	case 54:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:504
		{
			xxVAL.mod.ASCII = true
		}
	case 55:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:505
		{
			xxVAL.mod.Nocase = true
		}
	case 56:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:506
		{
			xxVAL.mod.Fullword = true
		}
	case 57:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:507
		{
			xxVAL.mod.Private = true
		}
	case 58:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:513
		{
			xxVAL.mod = data.StringModifiers{}
		}
	case 59:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:517
		{
			xxVAL.mod = data.StringModifiers{
				Private: xxDollar[1].mod.Private || xxDollar[2].mod.Private,
			}
		}
	case 60:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:526
		{
			xxVAL.mod.Private = true
		}
	case 61:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:532
		{

		}
	case 62:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:536
		{

		}
	case 63:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:540
		{

		}
	case 64:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:545
		{

		}
	case 65:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:552
		{
		}
	case 66:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:553
		{
		}
	case 67:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:558
		{

		}
	case 68:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:562
		{

		}
	case 69:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:570
		{

		}
	case 70:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:578
		{

		}
	case 71:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:585
		{

		}
	case 72:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:589
		{

		}
	case 73:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:593
		{

		}
	case 74:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:597
		{

		}
	case 75:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:601
		{

		}
	case 76:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:605
		{

		}
	case 77:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:609
		{

		}
	case 78:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:613
		{

		}
	case 79:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:617
		{

		}
	case 80:
		xxDollar = xxS[xxpt-7 : xxpt+1]
//line /grammar/grammar.y:621
		{

		}
	case 81:
		xxDollar = xxS[xxpt-11 : xxpt+1]
//line /grammar/grammar.y:625
		{

		}
	case 82:
		xxDollar = xxS[xxpt-5 : xxpt+1]
//line /grammar/grammar.y:629
		{

		}
	case 83:
		xxDollar = xxS[xxpt-9 : xxpt+1]
//line /grammar/grammar.y:633
		{

		}
	case 84:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:637
		{

		}
	case 85:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:641
		{

		}
	case 86:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:645
		{

		}
	case 87:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:649
		{

		}
	case 88:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:653
		{

		}
	case 89:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:657
		{

		}
	case 90:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:661
		{

		}
	case 91:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:665
		{

		}
	case 92:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:669
		{

		}
	case 93:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:673
		{

		}
	case 94:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:677
		{

		}
	case 95:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:681
		{

		}
	case 96:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:685
		{

		}
	case 97:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:689
		{

		}
	case 98:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:696
		{
		}
	case 99:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:697
		{
		}
	case 100:
		xxDollar = xxS[xxpt-5 : xxpt+1]
//line /grammar/grammar.y:703
		{

		}
	case 101:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:711
		{

		}
	case 102:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:715
		{

		}
	case 103:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:723
		{

		}
	case 105:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:728
		{

		}
	case 108:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:742
		{

		}
	case 109:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:746
		{

		}
	case 111:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:755
		{

		}
	case 112:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:759
		{

		}
	case 113:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:767
		{

		}
	case 114:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:771
		{

		}
	case 115:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:775
		{

		}
	case 116:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:779
		{

		}
	case 117:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:783
		{

		}
	case 118:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:787
		{

		}
	case 119:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:791
		{

		}
	case 120:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:795
		{

		}
	case 121:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:799
		{

		}
	case 122:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:803
		{

		}
	case 123:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:807
		{

		}
	case 124:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:811
		{

		}
	case 125:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:815
		{

		}
	case 126:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:819
		{

		}
	case 127:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:823
		{

		}
	case 128:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:827
		{

		}
	case 129:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:831
		{

		}
	case 130:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:835
		{

		}
	case 131:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:839
		{

		}
	case 132:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:843
		{

		}
	case 133:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:847
		{

		}
	case 134:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:851
		{

		}
	case 135:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:855
		{

		}
	case 136:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:859
		{

		}
	case 137:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:863
		{

		}
	case 138:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:867
		{

		}
	}
	goto xxstack /* stack new state and value */
}
